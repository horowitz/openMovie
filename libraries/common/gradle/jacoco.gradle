apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.7'
    reportsDir = file("$buildDir/reports/coverage")
}

android {
    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }
}

ext.setProperty("isCodeAnalysisOn", true)

tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoUnitTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    def excludes = [
            '**/R.*',
            '**/R$*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*_MembersInjector.*',
            '**/di/**/*.*',
            '**/Dagger*Component.*',
            '**/Dagger*Component$Builder.*',
            '**/*Module_*Factory.*',
            '**/*Adapter*.*',
            '**/*ViewPager*.*',
            '**/*ViewHolder*.*',
            '**/*_Provide*/**',
            '**/*_Factory*/**'
    ]

    // generated classes
    classDirectories.from = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )
    // sources
    sourceDirectories.from = [
            android.sourceSets.main.java.srcDirs,
            "src/main/kotlin",
            "src/main/java"
    ]
    // Output and existing data
    // Combine Unit test and Instrumented test reports
    executionData.from = fileTree(dir: "$buildDir", includes: [
            // Unit tests coverage data
            "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
            // Instrumented tests coverage data
            "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"
    ])

    reports {
        xml.enabled = true
        html.enabled = true
    }

    doLast {
        exec { commandLine 'open', "build/reports/coverage/jacocoUnitTestReport/html/index.html" }
    }
}